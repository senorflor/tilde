#!/bin/bash

# bash_profile

declare -a files=(
    "$HOME/.tilde/bash/bash_options" # Options
    "$HOME/.tilde/bash/bash_exports" # Exports
    "$HOME/.tilde/bash/bash_aliases" # Aliases
    "$HOME/.tilde/bash/bash_eliases" # For Eli
    "$HOME/.tilde/bash/functions/*" # Functions
    "$HOME/.tilde/bash/bash_prompt" # Custom bash prompt
    "$HOME/.bash_profile.local" # Local and private settings not under version control (e.g. git credentials)
    "$HOME/.tilde/bash/bash_paths" # Path modifications (must source after `.bash_profile.local` in case of custom `brew` location)
    "/usr/local/bin/virtualenvwrapper.sh" # Python virtualenvwrapper
)
for index in ${!files[*]}
do
    if [[ -r ${files[$index]} ]]; then
        source ${files[$index]}
    fi
done
unset files

# We only use `brew` after it has been added to the PATH, but want to
# source these files based on wherever brew is.
declare -a post_brew_files=(
    "$(brew --prefix)/etc/bash_completion"
    "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc"
    "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc"
)
for index in ${!post_brew_files[*]}
do
    if [[ -r ${post_brew_files[$index]} ]]; then
        source ${post_brew_files[$index]}
    fi
done
unset post_brew_files

# start *env shims
declare -a shims=(
    jenv
    nodenv
    pyenv
    rbenv
)
for index in ${!shims[*]}
do
    shim=${shims[$index]}
    hash ${shim} &> /dev/null && eval "$(${shim} init -)"
done

# For pyenv, we want to manage pip and conda envs/packages via pyenv,
# which requires the pyenv-virtualenv plugin (installed via
# brew/Brewfile). Here we initialize it after pyenv itself has already
# been initialized:
eval "$(pyenv virtualenv-init -)"
