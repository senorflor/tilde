#!/bin/bash 
SCRIPT_LOCATION="${BASH_SOURCE%/*}"
source "$SCRIPT_LOCATION/utils"

# Help text
read -r -d '' VERSION_HELP << EOS
version - make assertions about OS X versions

  Usage: $(basename "$0") COMMAND VERSION

  Commands:
    lt     check if OSX version is less than VERSION (e.g. 10.12.4)
    eq     check if OSX version is equal to VERSION (up to specificity of VERSION)
    gt     check if OSX version is less than VERSION (e.g. 10.12.4)

  Will succeed/error based on whether the version is _unambiguously_
  lt/eq/gt the version string provided up until its level of
  specificity, e.g. if run on OSX version 10.12.4:

  $(basename "$0") lt 11.12     # succeeds at major level (10 less than 11).
  $(basename "$0") lt 10.13     # succeeds at minor level (12 less than 13)
  $(basename "$0") lt 10        # fails at major level (10 not less than 10).
  $(basename "$0") lt 10.12.4   # fails at patch level (4 not less than 4)
  $(basename "$0") eq 10        # succeeds at major level (10 equals 10)
  $(basename "$0") eq 10.12     # succeeds at minor level (12 equals 12)
  $(basename "$0") eq 10.12.2   # fails at patch level (4 not equal to 2)
  $(basename "$0") gt 11.11.3   # fails at major level (10 not greater than 11)
  $(basename "$0") gt 10.12.3   # succeeds at patch level (4 greater than 3)
  $(basename "$0") gt 10        # fails at major level (10 not greater than 10)

EOS


print_help() {
  printf "$VERSION_HELP"
}

parse_command() {
  case $1 in
    "help") print_help && exit ;;
    "lt"|"eq"|"gt") ;;
    [^-]*) print_warn "Invalid command: $1\n" && exit 1 ;;
  esac
}

validate_version_string() {
  local major='(0|[1-9][0-9]*)' # Always required, sometimes 0.
  local minor_or_patch='(\.(0|[1-9][0-9]*))?' # sometimes 0.
  valid_version_re="^${major}${minor_or_patch}${minor_or_patch}$"
  if ! [[ $1 =~ $valid_version_re ]]; then
    print_warn "Invalid version string: $1\n"
    exit 1
  fi
}

compare() {
  parse_command $1 # The sanity of the below `eval` statement depends
                   # on a closed class of commands.

  validate_version_string $2

  # Get the version numbers' major, minor, and patch version segments.
  local a b c osx_version="$(sw_vers -productVersion)"
  IFS=. read a b c <<<"$osx_version"
  local x y z desired_version=$2 
  IFS=. read x y z <<<"$desired_version"

  # Bless me $PPID, for I have sinned
  local compares
  if [[ "$1" == "eq" ]]; then
    compares=$([[ \
      ("$a" -eq "$x") && \
      (-z "$y" || $b -eq "$y" ) && \
      (-z "$z" || $c -eq "$z") \
    ]] && echo 0 || echo 1)
  else
    # My kingdom for a higher order comparison operator. Could
    # probably just negate the numbers to invert lt/gt or something
    # simpler, but was "good" to play around with eval.
    compares=$(eval "[[ ($a -$1 $x) || \
      ($a -eq $x && -n \"$y\" && $b -$1 \"$y\") || \
      ($b -eq \"$y\" && -n \"$z\" && $c -$1 \"$z\") \
      ]] && echo 0 || echo 1")
  fi
  exit $compares
}

compare $@
